{
    "dcount": 1,
    "frameworks": ["angular2", "cycle", "react"],
    "icount": 3,
    "tlength": 7087,
    "demos": [{
        "frameworks": [{
            "name": "Angular2",
            "folderName": "angular2",
            "implementations": [{
                "title": "A vanilla implementation",
                "author": "krawaller",
                "language": "typescript",
                "folderName": "vanilla",
                "demoName": "composition",
                "framework": "angular2",
                "niceFrameworkName": "Angular2",
                "deps": [{
                    "package": "@angular/common",
                    "version": "2.0.0-rc.4"
                }, {
                    "package": "@angular/compiler",
                    "version": "2.0.0-rc.4"
                }, {
                    "package": "@angular/core",
                    "version": "2.0.0-rc.4"
                }, {
                    "package": "@angular/forms",
                    "version": "0.2.0"
                }, {
                    "package": "@angular/http",
                    "version": "2.0.0-rc.4"
                }, {
                    "package": "@angular/platform-browser",
                    "version": "2.0.0-rc.4"
                }, {
                    "package": "@angular/platform-browser-dynamic",
                    "version": "2.0.0-rc.4"
                }, {
                    "package": "@angular/router",
                    "version": "3.0.0-beta.2"
                }, {
                    "package": "core-js",
                    "version": "^2.4.1"
                }, {
                    "package": "es6-shim",
                    "version": "^0.35.0"
                }, {
                    "package": "reflect-metadata",
                    "version": "0.1.3"
                }, {
                    "package": "rxjs",
                    "version": "5.0.0-beta.6"
                }, {
                    "package": "zone.js",
                    "version": "0.6.12"
                }],
                "explanation": "<p>This is an idiomatic Angular 2 solution without any surprises. All communication is clearly defined through the <code>@Input</code> and <code>@Output</code> decorators.</p>\n<p>I opted not to actively store the field value in my model, instead I fetch it from the DOM using a <code>@ViewChild</code> reference upon submission. This seems to be a typical Angular approach.</p>\n",
                "files": [{
                    "filename": "app",
                    "suffix": ".ts",
                    "size": 408,
                    "code": "<span class=\"hljs-keyword\">import</span> {Component,ViewChild,EventEmitter,Output} from <span class=\"hljs-string\">'@angular/core'</span>\n<span class=\"hljs-keyword\">import</span> {Field} from <span class=\"hljs-string\">'./field.ts'</span>\n\n@Component({\n  selector: <span class=\"hljs-string\">'#app'</span>,\n  template: <span class=\"hljs-string\">`\n    &lt;field instruction=\"Enter name\" (submission)=\"onSubmission($event)\"&gt;&lt;/field&gt;\n    &lt;p&gt;Submitted name: {{submission}}&lt;/p&gt;\n  `</span>,\n  directives: [Field]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> App {\n  submission: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">'Steve'</span>\n  onSubmission(txt) {\n    <span class=\"hljs-keyword\">this</span>.submission = txt;\n  }\n}"
                }, {
                    "filename": "bootstrap",
                    "suffix": ".ts",
                    "size": 171,
                    "code": "<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'core-js'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'zone.js'</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">'reflect-metadata'</span>\n\n<span class=\"hljs-keyword\">import</span> {bootstrap}    from <span class=\"hljs-string\">'@angular/platform-browser-dynamic'</span>;\n<span class=\"hljs-keyword\">import</span> {App} from <span class=\"hljs-string\">'./app.ts'</span>;\nbootstrap(App);\n"
                }, {
                    "filename": "confirm",
                    "suffix": ".ts",
                    "size": 754,
                    "code": "<span class=\"hljs-keyword\">import</span> {Component,Input,Output,EventEmitter} from <span class=\"hljs-string\">'@angular/core'</span>;\n\n@Component({\n  selector: <span class=\"hljs-string\">'confirm'</span>,\n  template: <span class=\"hljs-string\">`\n    &lt;span *ngIf=\"mode !== 'confirm'\"&gt;\n      &lt;button (click)=\"maybe()\" [disabled]=\"mode === 'disabled'\"&gt;Submit&lt;/button&gt;\n    &lt;/span&gt;\n    &lt;span *ngIf=\"mode === 'confirm'\"&gt;\n      &lt;button (click)=\"changedmymind()\"&gt;Cancel&lt;/button&gt;\n      &lt;button (click)=\"yesimsure()\"&gt;Confirm&lt;/button&gt;\n    &lt;/span&gt;\n  `</span>\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Confirm {\n  mode: <span class=\"hljs-built_in\">string</span> = <span class=\"hljs-string\">'waiting'</span>\n  @Output() confirm = <span class=\"hljs-keyword\">new</span> EventEmitter&lt;<span class=\"hljs-built_in\">void</span>&gt;()\n  @Input() <span class=\"hljs-keyword\">set</span> disabled(bool: <span class=\"hljs-built_in\">boolean</span>){\n    <span class=\"hljs-keyword\">this</span>.mode = bool ? <span class=\"hljs-string\">'disabled'</span> : <span class=\"hljs-string\">'waiting'</span>\n  }\n  maybe() { <span class=\"hljs-keyword\">this</span>.mode = <span class=\"hljs-string\">'confirm'</span> }\n  changedmymind() { <span class=\"hljs-keyword\">this</span>.mode = <span class=\"hljs-string\">'waiting'</span> }\n  yesimsure() {\n    <span class=\"hljs-keyword\">this</span>.confirm.emit();\n    <span class=\"hljs-keyword\">this</span>.mode = <span class=\"hljs-string\">'waiting'</span>\n  }\n}"
                }, {
                    "filename": "field",
                    "suffix": ".ts",
                    "size": 578,
                    "code": "<span class=\"hljs-keyword\">import</span> {Component,ViewChild,EventEmitter,Input,Output} from <span class=\"hljs-string\">'@angular/core'</span>\n<span class=\"hljs-keyword\">import</span> {Confirm} from <span class=\"hljs-string\">'./confirm.ts'</span>\n\n@Component({\n  selector: <span class=\"hljs-string\">'field'</span>,\n  template: <span class=\"hljs-string\">`\n    {{instruction}}: &lt;input #field (input)=\"0\"&gt;\n    &lt;confirm (confirm)=\"onConfirm()\" [disabled]=\"!field.value.length\"&gt;&lt;/confirm&gt;\n  `</span>,\n  directives: [Confirm]\n})\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> Field {\n  @ViewChild(<span class=\"hljs-string\">'field'</span>) input: <span class=\"hljs-built_in\">any</span>\n  @Input() instruction: <span class=\"hljs-built_in\">string</span>\n  @Output() submission = <span class=\"hljs-keyword\">new</span> EventEmitter&lt;<span class=\"hljs-built_in\">string</span>&gt;()\n  onConfirm() {\n    <span class=\"hljs-keyword\">this</span>.submission.emit(<span class=\"hljs-keyword\">this</span>.input.nativeElement.value)\n    <span class=\"hljs-keyword\">this</span>.input.nativeElement.value = <span class=\"hljs-string\">''</span>\n  }\n}"
                }],
                "bundleSize": 2603504,
                "size": 1911,
                "url": "composition_angular2_vanilla_info.html",
                "bundleName": "composition_angular2_vanilla.js",
                "githubUrl": "http://www.github.com/krawaller/jscomp/tree/gh-pages/demos/composition/angular2/vanilla"
            }]
        }, {
            "name": "Cycle",
            "folderName": "cycle",
            "implementations": [{
                "title": "With a composition helper",
                "author": "krawaller",
                "folderName": "comphelper",
                "demoName": "composition",
                "framework": "cycle",
                "niceFrameworkName": "Cycle",
                "deps": [{
                    "package": "xstream",
                    "version": "5.1.0"
                }, {
                    "package": "@cycle/dom",
                    "version": "10.0.5"
                }, {
                    "package": "@cycle/xstream-run",
                    "version": "3.0.3"
                }],
                "explanation": "<p>This CycleJS implementation of the app leans heavily on the composition helper introduced <a href=\"https://twitter.com/krawaller/status/743150786117517312\">here</a>.</p>\n<p>This means that the parent-&gt;child communications are visible in the <code>withComponent</code> calls. For instance here&#39;s the corresponding line from the <code>field</code> component...</p>\n<pre><code><span class=\"hljs-title\">export</span> <span class=\"hljs-keyword\">default</span> withComponent(<span class=\"hljs-type\">Field</span>,<span class=\"hljs-type\">Confirm</span>,'<span class=\"hljs-title\">disabled</span>$')\n</code></pre><p>...showing how <code>Field</code> will pass the <code>disabled$</code> sink as a source to <code>Confirm</code>.</p>\n",
                "files": [{
                    "filename": "app",
                    "suffix": ".js",
                    "size": 479,
                    "code": "<span class=\"hljs-keyword\">import</span> xs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'xstream'</span>\n<span class=\"hljs-keyword\">import</span> {div, p} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@cycle/dom'</span>;\n<span class=\"hljs-keyword\">import</span> Field <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./field'</span>\n<span class=\"hljs-keyword\">import</span> withComponent <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./extras'</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">view</span>(<span class=\"hljs-params\">{childsinks:{submit$,DOM}}</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> xs.combine(submit$.startWith(<span class=\"hljs-string\">'Steve'</span>),DOM).map(([submission,childvtree])=&gt; div([\n    childvtree,\n    p(<span class=\"hljs-string\">'Submitted value: '</span>+submission)\n  ]))\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\">sources</span>)</span>{\n  <span class=\"hljs-keyword\">return</span> {\n    DOM: view(sources),\n    instruction$: xs.of(<span class=\"hljs-string\">'Enter name'</span>)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> withComponent(App,Field,<span class=\"hljs-string\">'instruction$'</span>)"
                }, {
                    "filename": "bootstrap",
                    "suffix": ".js",
                    "size": 172,
                    "code": "<span class=\"hljs-keyword\">import</span> xs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'xstream'</span>\n<span class=\"hljs-keyword\">import</span> {run} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@cycle/xstream-run'</span>\n<span class=\"hljs-keyword\">import</span> {makeDOMDriver} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@cycle/dom'</span>\n\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app'</span>\n\nrun(App, { DOM: makeDOMDriver(<span class=\"hljs-string\">'#app'</span>) });"
                }, {
                    "filename": "confirm",
                    "suffix": ".js",
                    "size": 1022,
                    "code": "<span class=\"hljs-keyword\">import</span> {span, button} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@cycle/dom'</span>;\n<span class=\"hljs-keyword\">import</span> xs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'xstream'</span>\n\n<span class=\"hljs-keyword\">const</span> intent = sources=&gt; xs.merge(\n  sources.disabled$.map(i=&gt; i ? <span class=\"hljs-string\">'DISABLE'</span> : <span class=\"hljs-string\">'ENABLE'</span>),\n  sources.DOM.select(<span class=\"hljs-string\">'.maybe'</span>).events(<span class=\"hljs-string\">'click'</span>).map(i=&gt;<span class=\"hljs-string\">'MAYBE'</span>),\n  sources.DOM.select(<span class=\"hljs-string\">'.cancel'</span>).events(<span class=\"hljs-string\">'click'</span>).map(i=&gt;<span class=\"hljs-string\">'CANCEL'</span>),\n  sources.DOM.select(<span class=\"hljs-string\">'.confirm'</span>).events(<span class=\"hljs-string\">'click'</span>).map(i=&gt;<span class=\"hljs-string\">'CONFIRM'</span>)\n)\n\n<span class=\"hljs-keyword\">const</span> model = action$ =&gt; action$.fold((s,action)=&gt; {\n  <span class=\"hljs-keyword\">switch</span>(action){\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'DISABLE'</span>: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'disabled'</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'MAYBE'</span>: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'confirm'</span>\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'ENABLE'</span>: <span class=\"hljs-keyword\">return</span> s === <span class=\"hljs-string\">'disabled'</span> ? <span class=\"hljs-string\">'waiting'</span> : s\n    <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">'waiting'</span>\n  }\n},<span class=\"hljs-string\">'disabled'</span>)\n\n<span class=\"hljs-keyword\">const</span> view = state$ =&gt; state$.map(state=&gt; state === <span class=\"hljs-string\">'confirm'</span>\n  ? span([button(<span class=\"hljs-string\">'.confirm'</span>,<span class=\"hljs-string\">'Confirm'</span>),button(<span class=\"hljs-string\">'.cancel'</span>,<span class=\"hljs-string\">'Cancel'</span>)])\n  : button(<span class=\"hljs-string\">'.maybe'</span>,{attrs:{disabled: state === <span class=\"hljs-string\">'disabled'</span>}},<span class=\"hljs-string\">'Submit'</span>)\n)\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> sources=&gt; {\n  <span class=\"hljs-keyword\">const</span> action$ = intent(sources)  \n  <span class=\"hljs-keyword\">const</span> state$ = model(action$)\n  <span class=\"hljs-keyword\">const</span> vtree$ = view(state$)\n  <span class=\"hljs-keyword\">return</span> {\n    DOM: vtree$,\n    confirm$: action$.filter(i =&gt; i === <span class=\"hljs-string\">'CONFIRM'</span>)\n  }\n}"
                }, {
                    "filename": "extras",
                    "suffix": ".js",
                    "size": 402,
                    "code": "<span class=\"hljs-keyword\">import</span> xs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'xstream'</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> (parent, child, ...dependencies) =&gt; sources =&gt; {\n  <span class=\"hljs-keyword\">let</span> proxies = dependencies.reduce((proxies,dep)=&gt;({\n    ...proxies,\n    [dep]: xs.create()\n  }),{})\n  <span class=\"hljs-keyword\">const</span> childsinks = child({...sources,...proxies})\n  <span class=\"hljs-keyword\">const</span> sinks = parent({...sources,[<span class=\"hljs-string\">'childsinks'</span>]:childsinks})\n  <span class=\"hljs-built_in\">Object</span>.keys(proxies).forEach(proxy =&gt; proxies[proxy].imitate(sinks[proxy]))\n  <span class=\"hljs-keyword\">return</span> sinks\n}\n"
                }, {
                    "filename": "field",
                    "suffix": ".js",
                    "size": 1408,
                    "code": "<span class=\"hljs-keyword\">import</span> {div, input, p} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'@cycle/dom'</span>;\n<span class=\"hljs-keyword\">import</span> Confirm <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./confirm'</span>\n<span class=\"hljs-keyword\">import</span> xs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'xstream'</span>\n<span class=\"hljs-keyword\">import</span> withComponent <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./extras'</span>\n\n<span class=\"hljs-keyword\">const</span> intent = (DOM,confirm$)=&gt; {\n  <span class=\"hljs-keyword\">const</span> input$ = DOM.select(<span class=\"hljs-string\">'.field'</span>).events(<span class=\"hljs-string\">'input'</span>)\n  <span class=\"hljs-keyword\">const</span> newValue$ = input$\n    .map(e =&gt; ({type:<span class=\"hljs-string\">'INPUT'</span>, data:e.target.value}))\n  <span class=\"hljs-keyword\">const</span> submit$ = input$\n    .map(i=&gt; confirm$.map(s=&gt;({type:<span class=\"hljs-string\">'SUBMIT'</span>, data:i.target.value})))\n    .flatten()\n  <span class=\"hljs-keyword\">return</span> xs.merge(submit$,newValue$)\n}\n\n<span class=\"hljs-keyword\">const</span> model = action$ =&gt; action$.fold((state, action)=&gt; {\n  <span class=\"hljs-keyword\">switch</span>(action.type){\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'INPUT'</span>: <span class=\"hljs-keyword\">return</span> {...state, input: action.data}\n    <span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">'SUBMIT'</span>: <span class=\"hljs-keyword\">return</span> {submission: action.data, input: <span class=\"hljs-string\">''</span>}\n    <span class=\"hljs-keyword\">default</span>: <span class=\"hljs-keyword\">return</span> state\n  }\n}, {submission:<span class=\"hljs-string\">''</span>,input:<span class=\"hljs-string\">''</span>} )\n\n<span class=\"hljs-keyword\">const</span> view = (state$,confirmvtree$,instruction$)=&gt;\n  xs.combine(state$,confirmvtree$,instruction$).map(([state,confirmvtree,instruction])=&gt;\n    div(<span class=\"hljs-string\">'.child'</span>,[\n      instruction+<span class=\"hljs-string\">': '</span>,\n      input(<span class=\"hljs-string\">'.field'</span>, {props:{value: state.input}}),\n      confirmvtree\n    ])\n  )\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">Field</span>(<span class=\"hljs-params\">sources</span>)</span>{\n  <span class=\"hljs-keyword\">const</span> action$ = intent(sources.DOM, sources.childsinks.confirm$)\n  <span class=\"hljs-keyword\">const</span> state$ = model(action$)\n  <span class=\"hljs-keyword\">const</span> vtree$ = view(state$, sources.childsinks.DOM, sources.instruction$)\n  <span class=\"hljs-keyword\">return</span> {\n    DOM: vtree$,\n    submit$: action$.filter(a =&gt; a.type === <span class=\"hljs-string\">'SUBMIT'</span>).map(a=&gt;a.data),\n    disabled$: action$.map(a =&gt; a.type === <span class=\"hljs-string\">'SUBMIT'</span> || !a.data)\n  }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> withComponent(Field,Confirm,<span class=\"hljs-string\">'disabled$'</span>)\n"
                }],
                "bundleSize": 229579,
                "size": 3483,
                "url": "composition_cycle_comphelper_info.html",
                "bundleName": "composition_cycle_comphelper.js",
                "githubUrl": "http://www.github.com/krawaller/jscomp/tree/gh-pages/demos/composition/cycle/comphelper"
            }]
        }, {
            "name": "React",
            "folderName": "react",
            "implementations": [{
                "title": "Vanilla",
                "author": "krawaller",
                "folderName": "vanilla",
                "demoName": "composition",
                "framework": "react",
                "niceFrameworkName": "React",
                "deps": [{
                    "package": "react",
                    "version": "^15.2.0"
                }, {
                    "package": "react-dom",
                    "version": "^15.2.0"
                }],
                "explanation": "<p>No surprises here, this is a vanilla React implementation with no helpers. All components are stateful. I used <code>React.createClass</code> over ES6 classes because of personal preference, no real reasons. </p>\n<p>I opted to have a <a href=\"https://facebook.github.io/react/docs/forms.html#controlled-components\">controlled input</a> for the <code>Field</code> instead of relying on the DOM for storage.</p>\n",
                "files": [{
                    "filename": "app",
                    "suffix": ".js",
                    "size": 405,
                    "code": "<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> Field <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./field'</span>\n\n<span class=\"hljs-keyword\">let</span> App = React.createClass({\n  getInitialState: ()=&gt; ({submission:<span class=\"hljs-string\">'Steve'</span>}),\n  onSubmission(txt) { <span class=\"hljs-keyword\">this</span>.setState({submission:txt}) },\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Field</span> <span class=\"hljs-attr\">instruction</span>=<span class=\"hljs-string\">\"Enter name\"</span> <span class=\"hljs-attr\">onSubmission</span>=<span class=\"hljs-string\">{this.onSubmission}</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Submitted value: {this.state.submission}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    )\n  }\n})\n\nexport default App</span>"
                }, {
                    "filename": "bootstrap",
                    "suffix": ".js",
                    "size": 143,
                    "code": "<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> ReactDOM <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react-dom'</span>\n\n<span class=\"hljs-keyword\">import</span> App <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./app'</span>\n\nReactDOM.render( <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span>/&gt;</span></span>, <span class=\"hljs-built_in\">document</span>.getElementById(<span class=\"hljs-string\">\"app\"</span>) );"
                }, {
                    "filename": "confirm",
                    "suffix": ".js",
                    "size": 602,
                    "code": "<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n\n<span class=\"hljs-keyword\">let</span> Confirm = React.createClass({\n  getInitialState: ()=&gt; ({mode:<span class=\"hljs-string\">'waiting'</span>}),\n  maybe() { <span class=\"hljs-keyword\">this</span>.setState({mode:<span class=\"hljs-string\">'confirm'</span>}) },\n  changedmymind() { <span class=\"hljs-keyword\">this</span>.setState({mode:<span class=\"hljs-string\">'waiting'</span>}) },\n  yesimsure() {\n    <span class=\"hljs-keyword\">this</span>.props.confirm();\n    <span class=\"hljs-keyword\">this</span>.setState({mode:<span class=\"hljs-string\">'waiting'</span>})\n  },\n  render() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.state.mode !== <span class=\"hljs-string\">'confirm'</span>\n    ? <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.maybe}</span> <span class=\"hljs-attr\">disabled</span>=<span class=\"hljs-string\">{this.props.disabled}</span>&gt;</span>Submit<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n    : <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.changedmymind}</span>&gt;</span>Cancel<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{this.yesimsure}</span>&gt;</span>Confirm<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n  }\n})\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> Confirm"
                }, {
                    "filename": "field",
                    "suffix": ".js",
                    "size": 543,
                    "code": "<span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'react'</span>\n<span class=\"hljs-keyword\">import</span> Confirm <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">'./confirm'</span>\n\n<span class=\"hljs-keyword\">let</span> Field = React.createClass({\n  getInitialState: ()=&gt; ({field:<span class=\"hljs-string\">''</span>}),\n  onConfirm() {\n    <span class=\"hljs-keyword\">this</span>.props.onSubmission(<span class=\"hljs-keyword\">this</span>.state.field);\n    <span class=\"hljs-keyword\">this</span>.setState({field:<span class=\"hljs-string\">''</span>});\n  },\n  onChange(e) {\n    <span class=\"hljs-keyword\">this</span>.setState({field:e.target.value});\n  },\n  render() {\n    <span class=\"hljs-keyword\">return</span> (\n      &lt;div&gt;\n        {this.props.instruction}: &lt;input value={this.state.field} onChange={this.onChange}/&gt;\n        &lt;Confirm disabled={!this.state.field} confirm={this.onConfirm}/&gt;\n      &lt;/div&gt;\n    )\n  }\n})\n\nexport default Field"
                }],
                "bundleSize": 726780,
                "size": 1693,
                "url": "composition_react_vanilla_info.html",
                "bundleName": "composition_react_vanilla.js",
                "githubUrl": "http://www.github.com/krawaller/jscomp/tree/gh-pages/demos/composition/react/vanilla"
            }]
        }],
        "filenames": ["app", "bootstrap", "confirm", "field", "extras"],
        "description": "<p>This shows off how to do compositions yada blah</p>\n<p><img src=\"../images/components.svg\" alt=\"\"></p>\n",
        "folderName": "composition",
        "name": "Composition",
        "summary": "How to do composition"
    }]
}